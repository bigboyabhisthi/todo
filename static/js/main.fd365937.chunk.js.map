{"version":3,"sources":["Components/ToDo.jsx","Components/ToDoList.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ToDo","props","id","name","completed","toggleCompleted","className","htmlFor","type","checked","onChange","e","console","log","aria-hidden","style","textDecoration","color","ToDoList","taskList","map","task","LOCAL_STORAGE_KEY","App","useState","taskName","setTaskName","setTaskList","useEffect","savedTaskList","JSON","parse","localStorage","getItem","setItem","stringify","countIncompletedTask","filter","length","onSubmit","preventDefault","isEmpty","isExist","find","toLocaleLowerCase","prevTaskList","uuid","placeholder","value","target","title","onClick","class","newTaskList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd365937.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../ToDo.css';\r\n\r\nconst ToDo = props => {\r\n\tconst { id, name, completed, toggleCompleted } = props;\r\n\r\n\tconst callToggleCompleted = e => {\r\n\t\tconsole.log(`${name}: ${!completed}`);\r\n\t\treturn toggleCompleted(id);\r\n\t};\r\n\r\n\tconst labelStyle = {\r\n\t\ttextDecoration: 'line-through',\r\n\t\tcolor: '#758283',\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='todoContainer'>\r\n\t\t\t<label htmlFor={id}>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='checkbox'\r\n\t\t\t\t\tclassName='checkBox'\r\n\t\t\t\t\tname='task'\r\n\t\t\t\t\tid={id}\r\n\t\t\t\t\tchecked={completed}\r\n\t\t\t\t\tonChange={callToggleCompleted}\r\n\t\t\t\t/>\r\n\t\t\t\t<i\r\n\t\t\t\t\tclassName={completed ? 'fa fa-check-circle' : 'fa fa-circle-thin'}\r\n\t\t\t\t\taria-hidden='true'\r\n\t\t\t\t></i>\r\n\t\t\t\t<span style={completed ? labelStyle : {}}>{name}</span>\r\n\t\t\t</label>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ToDo;\r\n","import React from 'react';\r\nimport ToDo from './ToDo';\r\n\r\nconst ToDoList = props => {\r\n\tconst { taskList, toggleCompleted } = props;\r\n\treturn (\r\n\t\t<div className='todoList'>\r\n\t\t\t{taskList.map(task => (\r\n\t\t\t\t<ToDo\r\n\t\t\t\t\tid={task.id}\r\n\t\t\t\t\tkey={task.id}\r\n\t\t\t\t\tname={task.name}\r\n\t\t\t\t\tcompleted={task.completed}\r\n\t\t\t\t\ttoggleCompleted={toggleCompleted}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ToDoList;\r\n","import React, { useEffect, useState } from 'react';\nimport { uuid } from 'uuidv4';\nimport ToDoList from './Components/ToDoList';\nimport './App.css';\n\nconst LOCAL_STORAGE_KEY = 'madhavrjha@github.io/todo.todo-list';\n\nconst App = () => {\n\tconst [taskName, setTaskName] = useState('');\n\tconst [taskList, setTaskList] = useState([]);\n\n\tuseEffect(() => {\n\t\tconst savedTaskList = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n\t\tif (savedTaskList) setTaskList(savedTaskList);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(taskList));\n\t}, [taskList]);\n\n\tconst toggleCompleted = id => {\n\t\tlet newTaskList = [...taskList];\n\t\tlet task = newTaskList.find(task => task.id === id);\n\t\ttask.completed = !task.completed;\n\t\tsetTaskList(newTaskList);\n\t};\n\n\tconst handleChange = e => {\n\t\tsetTaskName(e.target.value);\n\t};\n\n\tconst addTaskToList = e => {\n\t\te.preventDefault();\n\n\t\t// const copyTaskName = taskName.toLocaleLowerCase();\n\t\tconst isEmpty = taskName === '';\n\t\tconst isExist = taskList.find(\n\t\t\ttask => taskName.toLocaleLowerCase() === task.name.toLocaleLowerCase()\n\t\t);\n\n\t\tif (!isEmpty && !isExist) {\n\t\t\tsetTaskName('');\n\t\t\tsetTaskList(prevTaskList => [\n\t\t\t\t...prevTaskList,\n\t\t\t\t{\n\t\t\t\t\tid: uuid(),\n\t\t\t\t\tname: taskName,\n\t\t\t\t\tcompleted: false,\n\t\t\t\t},\n\t\t\t]);\n\t\t} else {\n\t\t\tif (isEmpty) console.log('Empty Task Could not be added');\n\t\t\tif (isExist) console.log('Existed Task Could not be added');\n\t\t}\n\t};\n\n\tconst removeCompletedTask = e => {\n\t\tsetTaskList(prevTaskList => {\n\t\t\treturn prevTaskList.filter(task => !task.completed);\n\t\t});\n\t};\n\n\tconst countIncompletedTask = () => {\n\t\treturn taskList.filter(task => !task.completed).length;\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<h1 className='header'>Todo</h1>\n\t\t\t<div className='container'>\n\t\t\t\t<form className='getArea' onSubmit={addTaskToList}>\n\t\t\t\t\t<div className='inputBox'>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tname='taskName'\n\t\t\t\t\t\t\tplaceholder='Enter Your Task'\n\t\t\t\t\t\t\tvalue={taskName}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='actionArea'>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t{countIncompletedTask() === 0 ? 'No' : countIncompletedTask()}{' '}\n\t\t\t\t\t\t\tTasks Remaining\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName='myButton'\n\t\t\t\t\t\t\ttitle='Remove Completed'\n\t\t\t\t\t\t\tonClick={removeCompletedTask}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<i class='fa fa-trash' aria-hidden='true'></i>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t\t<ToDoList taskList={taskList} toggleCompleted={toggleCompleted} />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}