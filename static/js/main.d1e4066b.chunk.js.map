{"version":3,"sources":["Components/ToDo.jsx","Components/ToDoList.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ToDo","props","id","name","completed","toggleCompleted","htmlFor","style","textDecoration","type","checked","onChange","e","console","log","ToDoList","taskList","Fragment","map","task","LOCAL_STORAGE_KEY","App","useState","taskName","setTaskName","setTaskList","useEffect","savedTaskList","JSON","parse","localStorage","getItem","setItem","stringify","className","onSubmit","preventDefault","value","target","onClick","copyTaskName","toLocaleLowerCase","isEmpty","isExist","find","prevTaskList","uuid","filter","length","newTaskList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMA8BeA,EA5BF,SAAAC,GAAU,IACdC,EAAyCD,EAAzCC,GAAIC,EAAqCF,EAArCE,KAAMC,EAA+BH,EAA/BG,UAAWC,EAAoBJ,EAApBI,gBAW7B,OACC,8BACC,wBAAOC,QAAQ,OAAOC,MAAOH,EANZ,CAClBI,eAAgB,gBAKuC,GAAtD,UACC,uBACCC,KAAK,WACLN,KAAK,OACLD,GAAG,OACHQ,QAASN,EACTO,SAjBiB,SAAAC,GAEpB,OADAC,QAAQC,IAAR,UAAeX,EAAf,cAAyBC,IAClBC,EAAgBH,MAiBpBC,QCJUY,EAjBE,SAAAd,GAAU,IAClBe,EAA8Bf,EAA9Be,SAAUX,EAAoBJ,EAApBI,gBAClB,OACC,cAAC,IAAMY,SAAP,UACED,EAASE,KAAI,SAAAC,GAAI,OACjB,cAAC,EAAD,CACCjB,GAAIiB,EAAKjB,GAETC,KAAMgB,EAAKhB,KACXC,UAAWe,EAAKf,UAChBC,gBAAiBA,GAHZc,EAAKjB,UCNTkB,EAAoB,sCAmFXC,EAjFH,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACVC,EADU,KACAC,EADA,OAEeF,mBAAS,IAFxB,mBAEVN,EAFU,KAEAS,EAFA,KAIjBC,qBAAU,WACT,IAAMC,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQX,IAClDO,GAAeF,EAAYE,KAC7B,IAEHD,qBAAU,WACTI,aAAaE,QAAQZ,EAAmBQ,KAAKK,UAAUjB,MACrD,CAACA,IAiDJ,OACC,sBAAKkB,UAAU,MAAf,UACC,sCACA,uBAAMC,SA3CsB,SAAAvB,GAC7BA,EAAEwB,kBA0CD,UACC,uBACC3B,KAAK,OACLN,KAAK,WACLkC,MAAOd,EACPZ,SA5CiB,SAAAC,GACpBY,EAAYZ,EAAE0B,OAAOD,UA6CnB,wBAAQ5B,KAAK,SAAS8B,QA1CH,SAAA3B,GACrB,IAAM4B,EAAejB,EAASkB,oBAExBC,EAA2B,KAAjBF,EACVG,EAAU3B,EAAS4B,MAAK,SAAAzB,GAAI,OAAIqB,IAAiBrB,EAAKhB,QAEvDuC,GAAYC,GAWZD,GAAS7B,QAAQC,IAAI,iCACrB6B,GAAS9B,QAAQC,IAAI,qCAXzBU,EAAY,IACZC,GAAY,SAAAoB,GAAY,4BACpBA,GADoB,CAEvB,CACC3C,GAAI4C,iBACJ3C,KAAMqC,EACNpC,WAAW,UA6BZ,iBAGA,wBAAQmC,QAvBiB,SAAA3B,GAC3Ba,GAAY,SAAAoB,GACX,OAAOA,EAAaE,QAAO,SAAA5B,GAAI,OAAKA,EAAKf,iBAqBxC,qCAED,8BAlBMY,EAAS+B,QAAO,SAAA5B,GAAI,OAAKA,EAAKf,aAAW4C,OAkB/C,qBACA,cAAC,EAAD,CAAUhC,SAAUA,EAAUX,gBA/DR,SAAAH,GACvB,IAAI+C,EAAW,YAAOjC,GAClBG,EAAO8B,EAAYL,MAAK,SAAAzB,GAAI,OAAIA,EAAKjB,KAAOA,KAChDiB,EAAKf,WAAae,EAAKf,UACvBqB,EAAYwB,UCXCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d1e4066b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ToDo = props => {\r\n\tconst { id, name, completed, toggleCompleted } = props;\r\n\r\n\tconst handleChange = e => {\r\n\t\tconsole.log(`${name}: ${!completed}`);\r\n\t\treturn toggleCompleted(id);\r\n\t};\r\n\r\n\tconst labelStyle = {\r\n\t\ttextDecoration: 'line-through',\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<label htmlFor='task' style={completed ? labelStyle : {}}>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='checkbox'\r\n\t\t\t\t\tname='task'\r\n\t\t\t\t\tid='task'\r\n\t\t\t\t\tchecked={completed}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t{name}\r\n\t\t\t</label>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ToDo;\r\n","import React from 'react';\r\nimport ToDo from './ToDo';\r\n\r\nconst ToDoList = props => {\r\n\tconst { taskList, toggleCompleted } = props;\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{taskList.map(task => (\r\n\t\t\t\t<ToDo\r\n\t\t\t\t\tid={task.id}\r\n\t\t\t\t\tkey={task.id}\r\n\t\t\t\t\tname={task.name}\r\n\t\t\t\t\tcompleted={task.completed}\r\n\t\t\t\t\ttoggleCompleted={toggleCompleted}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default ToDoList;\r\n","import React, { useEffect, useState } from 'react';\nimport { uuid } from 'uuidv4';\nimport ToDoList from './Components/ToDoList';\n\nconst LOCAL_STORAGE_KEY = 'madhavrjha@github.io/todo.todo-list';\n\nconst App = () => {\n\tconst [taskName, setTaskName] = useState('');\n\tconst [taskList, setTaskList] = useState([]);\n\n\tuseEffect(() => {\n\t\tconst savedTaskList = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n\t\tif (savedTaskList) setTaskList(savedTaskList);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(taskList));\n\t}, [taskList]);\n\n\tconst toggleCompleted = id => {\n\t\tlet newTaskList = [...taskList];\n\t\tlet task = newTaskList.find(task => task.id === id);\n\t\ttask.completed = !task.completed;\n\t\tsetTaskList(newTaskList);\n\t};\n\n\tconst preventFormSubmission = e => {\n\t\te.preventDefault();\n\t};\n\n\tconst handleChange = e => {\n\t\tsetTaskName(e.target.value);\n\t};\n\n\tconst addTaskToList = e => {\n\t\tconst copyTaskName = taskName.toLocaleLowerCase();\n\n\t\tconst isEmpty = copyTaskName === '';\n\t\tconst isExist = taskList.find(task => copyTaskName === task.name);\n\n\t\tif (!isEmpty && !isExist) {\n\t\t\tsetTaskName('');\n\t\t\tsetTaskList(prevTaskList => [\n\t\t\t\t...prevTaskList,\n\t\t\t\t{\n\t\t\t\t\tid: uuid(),\n\t\t\t\t\tname: copyTaskName,\n\t\t\t\t\tcompleted: false,\n\t\t\t\t},\n\t\t\t]);\n\t\t} else {\n\t\t\tif (isEmpty) console.log('Empty Task Could not be added');\n\t\t\tif (isExist) console.log('Existed Task Could not be added');\n\t\t}\n\t};\n\n\tconst removeCompletedTask = e => {\n\t\tsetTaskList(prevTaskList => {\n\t\t\treturn prevTaskList.filter(task => !task.completed);\n\t\t});\n\t};\n\n\tconst countIncompletedTask = () => {\n\t\treturn taskList.filter(task => !task.completed).length;\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<h1>ToDo</h1>\n\t\t\t<form onSubmit={preventFormSubmission}>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tname='taskName'\n\t\t\t\t\tvalue={taskName}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t/>\n\t\t\t\t<button type='submit' onClick={addTaskToList}>\n\t\t\t\t\tAdd\n\t\t\t\t</button>\n\t\t\t\t<button onClick={removeCompletedTask}>Remove All Completed</button>\n\t\t\t</form>\n\t\t\t<p>{countIncompletedTask()} task remaining</p>\n\t\t\t<ToDoList taskList={taskList} toggleCompleted={toggleCompleted} />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}